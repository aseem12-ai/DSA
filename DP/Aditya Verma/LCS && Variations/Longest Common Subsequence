https://leetcode.com/problems/longest-common-subsequence/description/


//Recursion

class Solution {
public:
    int func(string s1,string s2,int m,int n){
        if(m==0 || n==0) return 0;
        if(s1[m-1]==s2[n-1]) return 1+func(s1,s2,m-1,n-1);
        return max(func(s1,s2,m,n-1),func(s1,s2,m-1,n));
    }
    int longestCommonSubsequence(string text1, string text2) {

        int m=text1.size(),n=text2.size();
        return func(text1,text2,m,n);
        
    }
};



//Memo

class Solution {
public:
    int t[1001][1001];
    int func(string s1,string s2,int m,int n){
        if(m==0 || n==0) return 0;
        if(t[m][n]!=-1) return t[m][n];
        if(s1[m-1]==s2[n-1]) return t[m][n]=1+func(s1,s2,m-1,n-1);
        return t[m][n]=max(func(s1,s2,m,n-1),func(s1,s2,m-1,n));
    }
    int longestCommonSubsequence(string text1, string text2) {

        int m=text1.size(),n=text2.size();
        memset(t,-1,sizeof(t));
        return func(text1,text2,m,n);
        
    }
};



//top-Down



class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {

        int m=text1.size(),n=text2.size();

        vector<vector<int>> t(m+1,vector<int>(n+1));

        for(int i=0;i<m+1;i++){
            for(int j=0;j<n+1;j++){
                if(i==0 || j==0) t[i][j]=0;
            }
        }

        for(int i=1;i<m+1;i++){
            for(int j=1;j<n+1;j++){
                if(text1[i-1]==text2[j-1]){
                    t[i][j]=1+t[i-1][j-1];
                }
                else{
                    t[i][j]=max(t[i-1][j],t[i][j-1]);
                }
            }
        }
        return t[m][n];
        
    }
};
