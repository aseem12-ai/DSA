https://leetcode.com/problems/palindrome-partitioning-ii/description/


//Recursion

class Solution {
public:
    int n;
    bool isPalindrome(string s,int i,int j){
        int l=i,r=j;
        while(l<=r){
            if(s[l]==s[r]){
                l++;
                r--;
            }
            else{
                return false;
            }
        }
        return true;
    }
    int solve(string s,int i,int j){
        if(i>=j) return 0;
        if(isPalindrome(s,i,j)) return 0;
        int ans=INT_MAX;
        for(int k=i;k<=j-1;k++){
            int temp=1+solve(s,i,k)+solve(s,k+1,j);
            ans=min(ans,temp);
        }
        return ans;
    }
    int minCut(string s) {
        n=s.size();
        return solve(s,0,n-1);
        
    }
};

//Memo


class Solution {
public:
    int n;
    int t[2001][2001];
    bool isPalindrome(string s,int i,int j){
        int l=i,r=j;
        while(l<=r){
            if(s[l]==s[r]){
                l++;
                r--;
            }
            else{
                return false;
            }
        }
        return true;
    }
    int solve(string s,int i,int j){
        if(i>=j) return 0;
        if(isPalindrome(s,i,j)) return 0;
        if(t[i][j]!=-1) return t[i][j];
        int ans=INT_MAX;
        for(int k=i;k<=j-1;k++){
            int temp=1+solve(s,i,k)+solve(s,k+1,j);
            ans=min(ans,temp);
        }
        return t[i][j]=ans;
    }
    int minCut(string s) {
        n=s.size();
        memset(t,-1,sizeof(t));
        return solve(s,0,n-1);
        
    }
};
