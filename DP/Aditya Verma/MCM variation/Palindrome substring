https://leetcode.com/problems/palindromic-substrings/



//Recursion

class Solution {
public:
    bool checkPalindrome(string s,int i,int j){
        if(i>j) return true;
        if(s[i]==s[j]){
            return checkPalindrome(s,i+1,j-1);
        }
        return false;
    }
    int countSubstrings(string s) {
        int count=0;
        int n=s.size();
        for(int i=0;i<n;i++){
            for(int j=i;j<n;j++){
                if(checkPalindrome(s,i,j)){
                    count++;
                }
            }
        }
        return count;
        
    }
};




//MEmo


class Solution {
public:
    int t[1001][1001];
    bool checkPalindrome(string s,int i,int j){
        if(i>j) return true;
        if(t[i][j]!=-1) return t[i][j];
        if(s[i]==s[j]){
            return t[i][j]=checkPalindrome(s,i+1,j-1);
        }
        return t[i][j]=false;
    }
    int countSubstrings(string s) {
        int count=0;
        int n=s.size();
        memset(t,-1,sizeof(t));
        for(int i=0;i<n;i++){
            for(int j=i;j<n;j++){
                if(checkPalindrome(s,i,j)){
                    count++;
                }
            }
        }
        return count;
        
    }
};





//top-down



class Solution {
public:
    bool t[1001][1001];
   
    int countSubstrings(string s) {
        int count=0;
        int n=s.size();
        memset(t,false,sizeof(t));
        for(int L=1;L<=n;L++){
            for(int i=0;i+L-1<n;i++){
                int j=i+L-1;
                if(i==j) t[i][j]=true;
                else if(i+1 == j ){
                    t[i][j]=(s[i]==s[j]);
                }
                else{
                    t[i][j]=(s[i]==s[j] && t[i+1][j-1]);
                }

                if(t[i][j]==true){
                    count++;
                }
                    
                
            }
        }
        
        return count;
        
    }
};





//explore two sides



class Solution {
public:
    int count;
    void check(string s,int i,int j,int n){
        while(i>=0 && j<n && s[i]==s[j]){
            count++;
            i--;
            j++;
        }
    }
    int countSubstrings(string s) {
        count=0;
        int n=s.size();
        for(int i=0;i<n;i++){
            check(s,i,i,n);
            check(s,i,i+1,n);
        }
        return count;

        
    }
};
