https://leetcode.com/problems/restore-the-array/description/


//Recursion

class Solution {
public:
    const int M=1e9+7;
    int func(int i,const string& s,int k){
        int n=s.size();
        if(i>=n) return 1;
        if(s[i]=='0') return 0;
        // if(dp[i]!=-1) return dp[i];
        int ans=0;
        long  num=0;

        for(int j=i;j<n;j++){
            num=(num*10)+(s[j]-'0');
            if(num>k) break;
            ans=(ans%M+func(j+1,s,k)%M)%M;

        }
        return ans;
    }
    int numberOfArrays(string s, int k) {
        int n=s.size();
        vector<int> dp(n,-1);
        return func(0,s,k);
        
    }
};





//Memo




class Solution {
public:
    int dfs(const string& s, long k, int i, vector<int>& dp) {
        if (i == s.size()) return 1;
        if (s[i] == '0') return 0;
        if (dp[i] != -1) return dp[i];

        int ans = 0;
        long num = 0;
        for (int j = i; j < s.size(); j++) {
            num = num * 10 + s[j] - '0';
            if (num > k) break;
            ans = (ans + dfs(s, k, j + 1, dp))%1000000007;
        }
        return dp[i] = ans;
    }

    int numberOfArrays(string s, int k) {
        vector<int> dp(s.size(), -1);
        return dfs(s, k, 0, dp);
    }
};




//Top-Down





class Solution {
public:

    const int M=1e9 + 7;
    int numberOfArrays(string s, int k) {
        int n=s.size();
        vector<int> dp(n+1,0);
        dp[n]=1;

        for(int i=n-1;i>=0;i--){
            if(s[i]=='0'){
                dp[i]=0;
                continue;
            }
            long long num=0;
            for(int j=i;j<n;j++){

                num=num*10 + s[j]-'0';
                if(num>k) break;
                dp[i]=(dp[i]+dp[j+1])%M;

            }
        }
        return dp[0];
        
    }
};
